
             ( Adapted from Stackworks SL5 KERNEL for the 8080 )

                        ( 8086 Version 0.0  -  DOS )


CODE $$PUSH      AX PUSH   CS: LODS   AX JMP   EDOC

CODE $CONSTANT   BX POP   CS: 0 [BX] PUSH   $NEXT ) JMP   EDOC

CODE $BARRAY     BX POP   CS: 0 [BX] AX MOV   BX POP   BX AX ADD
                 $PUSH ) JMP   EDOC

CODE $ARRAY      BX POP   CS: 0 [BX] AX MOV   BX POP   BX BX ADD
                 BX AX ADD   $PUSH ) JMP   EDOC




( ==================================================================== )

              ( CONDITIONAL COMPILATION CONSTANTS )

        1 XCONSTANT ?FILESYS    ( COMPILE FILE SYSTEM SECTION           )
        0 XCONSTANT ?OWNIO      ( COMPILE USER I/O SECTION              )
        1 XCONSTANT ?CRT        ( COMPILE CRT I/O WORDS                 )
        1 XCONSTANT ?INTERP     ( COMPILE INTERPRETER SECTION           )
        1 XCONSTANT ?COMPILE    ( COMPILE THE COMPILER SECTION          )


( NOTES:  [1]  CRT SECTION NEEDS OWNIO OR FILESYS                       )
(         [2]  INTERPRETER NEEDS CRT SECTION                            )
(         [3]  COMPILER NEEDS INTERPRETER TO RUN.                       )
(         [4]  DO NOT COMPILE BOTH OWNIO AND FILE SYSTEM.               )

( ==================================================================== )



                ( VARIABLES & CONSTANTS )

   0 VARIABLE DP                   0 VARIABLE CURRENT
   0 VARIABLE CONTEXT              0 VARIABLE CVOC
6580 VARIABLE SYMTP                0 VARIABLE SYMPTR

   0 VARIABLE RESTARTAD            0 VARIABLE GOQIAD
   0 VARIABLE D/0AD
   0 VARIABLE STATE               10 VARIABLE BASE
   1 VARIABLE UPPER
  20 VARIABLE DELIMITER
 07F VARIABLE INFOF                0 VARIABLE FLAGS
   0 VARIABLE DEPTH
 100 CONSTANT SSIZE              100 CONSTANT RSIZE


                   ( STACKS & BUFFERS )

TDP @  1 &  0= IFTRUE  0 B,  IFEND  ( ALIGN )
SSIZE 10 + BARRAY STACK

TDP @  1 &  0= IFTRUE  0 B,  IFEND  ( ALIGN )
RSIZE 10 + BARRAY RSTACK



CODE LIT    CS: LODS   AX PUSH   $NEXT ) JMP   EDOC

CODE $SET   BX POP   CS: 0 [BX] DI MOV   CS: 2 [BX] AX MOV
            AX 0 [DI] MOV   $NEXT ) JMP   EDOC

CODE $FMAKE   $NEXT ) JMP   EDOC

CODE $:     BP DEC   BP DEC   SI 0 [BP] MOV   SI POP
            $NEXT ) JMP   EDOC

CODE $;     0 [BP] SI MOV   BP INC   BP INC
            $NEXT ) JMP   EDOC



                  ( ARITHMETIC OPERATIONS )

CODE +      BX POP   AX POP   BX AX ADD   $PUSH ) JMP   EDOC

CODE -      BX POP   AX POP   BX AX SUB   $PUSH ) JMP   EDOC

CODE |      BX POP   AX POP   BX AX OR    $PUSH ) JMP   EDOC

CODE &      BX POP   AX POP   BX AX AND   $PUSH ) JMP   EDOC

CODE X|     BX POP   AX POP   BX AX XOR   $PUSH ) JMP   EDOC

CODE 1+     AX POP   AX INC   $PUSH ) JMP   EDOC

CODE 1-     AX POP   AX DEC   $PUSH ) JMP   EDOC

CODE MINUS  AX POP   AX NEG   $PUSH ) JMP   EDOC



                    ( MEMORY OPERATIONS )

CODE !      BX POP   0 [BX] POP   $NEXT ) JMP   EDOC

CODE @      BX POP   0 [BX] PUSH   $NEXT ) JMP   EDOC

CODE B!     BX POP   AX POP   AL 0 [BX] MOV   $NEXT ) JMP   EDOC

CODE B@     BX POP   0 [BX] AL MOV   0 # AH MOV   $PUSH ) JMP   EDOC

CODE +!     BX POP   AX POP   AX 0 [BX] ADD   $NEXT ) JMP   EDOC

CODE 1+!    BX POP   0 [BX] INC   $NEXT ) JMP   EDOC

CODE 1-!    BX POP   0 [BX] DEC   $NEXT ) JMP   EDOC



                   ( STACK MANIPULATIONS )

CODE DUP    AX POP   AX PUSH   $PUSH ) JMP   EDOC

CODE DROP   BX POP   $NEXT ) JMP   EDOC

CODE OVER   BX POP   AX POP   AX PUSH   BX PUSH   $PUSH ) JMP   EDOC

CODE SWAP   BX POP   AX POP   BX PUSH   $PUSH ) JMP    EDOC

CODE ROT    BX POP   CX POP   AX POP   CX PUSH   BX PUSH
            $PUSH ) JMP   EDOC

CODE 2DROP  4 # SP ADD   $NEXT ) JMP   EDOC

CODE 2DUP   AX POP   BX POP   BX PUSH   AX PUSH   BX PUSH
            $PUSH ) JMP   EDOC

CODE 2SWAP  BX POP   CX POP   AX POP   DX POP   CX PUSH   BX PUSH
            DX PUSH   $PUSH ) JMP   EDOC

CODE R>     0 [BP] PUSH   2 # BP ADD   $NEXT ) JMP   EDOC

CODE >R     2 # BP SUB   0 [BP] POP   $NEXT ) JMP   EDOC

CODE ROLL   AX POP   SP BX MOV   CX POP
            BEGIN,
                AL DEC   0<> WHILE,
                BX INC   BX INC   CX 0 [BX] XCHG
            REPEAT,
            CX PUSH   $NEXT ) JMP   EDOC

CODE -ROLL  BX POP   BL AL MOV   BX SHL   SP BX ADD   CX POP
            BEGIN,
                AL DEC   0<> WHILE,
                BX DEC   BX DEC   CX 0 [BX] XCHG
            REPEAT,
            CX PUSH   $NEXT ) JMP   EDOC

CODE SP@   SP AX MOV   $PUSH ) JMP   EDOC

CODE SP!   AX POP   AX SP MOV   $NEXT ) JMP   EDOC

CODE RP@   BP PUSH   $NEXT ) JMP   EDOC

CODE RP!   AX POP   AX BP MOV   $NEXT ) JMP   EDOC

CODE PICK  BX POP   BX DEC   BX BX ADD   SP BX ADD
           0 [BX] PUSH   $NEXT ) JMP   EDOC



                       ( MISC. WORDS )

: HERE DP @ ;
: DP+! DP +! ;
: COUNT DUP 1+ SWAP B@ ;

CODE GO       AX POP   AX JMP   EDOC

: GO-OPSYS 0 GO ;


CODE BSWAP    AX POP   AH AL XCHG   $PUSH ) JMP   EDOC

CODE $BMOVE   CX POP   DI POP   BX POP
              BEGIN,
                  0 [BX] AL MOV   AL 0 [DI] MOV
                  BX INC   DI INC   CX DEC
              0= END,   $NEXT ) JMP

CODE $RMOVE   CX POP   DI POP   BX POP
              BEGIN,
                  0 [BX] AL MOV   AL 0 [DI] MOV
                  BX DEC   DI DEC   CX DEC
              0= END,   $NEXT ) JMP

CODE ->L      CX POP   AX POP   AX CL SHR   $PUSH ) JMP   EDOC

CODE <-L      CX POP   AX POP   AX CL SHL   $PUSH ) JMP   EDOC



                     ( CONDITION SETTINGS )

CODE 0=   BX POP   AX AX SUB   BX BX OR   0= IF,   AX INC   ENDIF,
          $PUSH ) JMP   EDOC

CODE 0<   BX POP   AX AX SUB   BX BX OR   0< IF,   AX INC   ENDIF,
          $PUSH ) JMP   EDOC

CODE 0>   BX POP   AX AX SUB   BX BX OR   >  IF,   AX INC   ENDIF,
          $PUSH ) JMP   EDOC

: NOT 0= ;
: = - 0= ;         : <> - 0= 0= ;         : < - 0< ;
: > - 0> ;         : <= - 0> 0= ;         : >= - 0< 0= ;

CODE U<   AX POP   BX POP   AX BX CMP   0 # AX MOV
          CY IF,   AX INC   ENDIF,   $PUSH ) JMP   EDOC


: U> SWAP U< ;         : U<= U> 0= ;         : U>= U< 0= ;



                   ( CONDITIONAL BASICS )

CODE $IF     AX POP   AX AX OR   0= IF,
                CS: 0 [SI] SI MOV   $NEXT ) JMP
             ENDIF,   SI INC   SI INC   $NEXT ) JMP   EDOC

CODE $ELSE   CS: 0 [SI] SI MOV   $NEXT ) JMP   EDOC



                ( $DO, $+LOOP, EXIT, I, J, K )

CODE $DO     4 # BP SUB   0 [BP] POP   2 [BP] POP
             $NEXT ) JMP   EDOC

CODE $+LOOP  AX POP   AX 0 [BP] ADD
             0 [BP] AX MOV   2 [BP] AX CMP   NC IF,
                  4 # BP ADD   SI INC   SI INC   $NEXT ) JMP
             ENDIF,   CS: 0 [SI] SI MOV   $NEXT ) JMP   EDOC

CODE EXIT    2 [BP] AX MOV   AX 0 [BP] MOV
             $NEXT ) JMP   EDOC

CODE I       0 # AX MOV   AX BP ADD   0 [BP] PUSH
             $NEXT ) JMP   EDOC

CODE J       4 # AX MOV  'B I 3 + ) JMP   EDOC

CODE K       8 # AX MOV  'B I 3 + ) JMP   EDOC



              ( MORE ARITHMETIC OPERATIONS )

: ABS DUP 0< IF
     MINUS
 ENDIF ;
: COM FFFF X| ;
: -- SWAP - ;
: MIN 2DUP > IF SWAP ENDIF DROP ;
: MAX 2DUP < IF SWAP ENDIF DROP ;
: @X @ BSWAP ;



                ( HIGH LEVEL MATH FUNCTIONS )

CODE *   BX POP   AX POP   BX IMUL   AX PUSH   $NEXT ) JMP   EDOC

CODE U/MOD   0 # DX MOV   BX POP   AX POP   BX DX CMP   CY IF,
                BX DIV   DX PUSH   AX PUSH   $NEXT ) JMP
             ENDIF,   D/0AD [] JMP   EDOC

: /MOD   OVER 0<   OVER 0<  OVER X|  2SWAP
  SWAP ABS SWAP ABS    U/MOD    ROT IF
      MINUS
  ENDIF   ROT IF
      SWAP MINUS SWAP
  ENDIF ;

: / /MOD SWAP DROP ;

: MOD /MOD DROP ;




                             ( BASIC CASE WORDS )

: $CASE R> DUP 2 + SWAP @ >R >R ;
: $=: OVER = IF
     DROP  R> 2 + >R
     ELSE R> @ >R
 ENDIF ;
: $;; R> DROP ;
: NOCASE DUP ;



  ( $;CODE ;:  )
: $:;CODE R> CURRENT @ @ SYMTP @ + 3 + @ 1+ SWAP OVER 2 + - SWAP ! ;

: $VOCAB @ DUP CVOC ! @ CONTEXT ! ;

BASEVOCAB FORTH
FORTH DEFINITIONS


                  ( BMOVE, RMOVE, FILL )

: BMOVE DUP IF $BMOVE ELSE DROP 2DROP ENDIF ;

: RMOVE DUP IF SWAP OVER 1- + SWAP ROT OVER 1- + ROT ROT $RMOVE
      ELSE DROP 2DROP ENDIF ;

: FILL 3 PICK IF
     OVER B! DUP 1+ ROT 1- BMOVE
     ELSE 2DROP DROP
 ENDIF ;

: BLANK 20 FILL ;





( ==================================================================== )
(                        FILE SYSTEM SECTION                           )
( ==================================================================== )
                           ?FILESYS IFTRUE



( 0 VARIABLE OP-VER#       ( CONTAINS CP/M VERSION NUMBER, SET BY ININIT )



           ( CHARACTER LEVEL INTERFACES TO OP-SYS )


CODE CALLDOS ( DX AH -- AL )
     AX POP   AL AH XCHG   DX POP   21 INT   0 # AH MOV
     $PUSH ) JMP   EDOC

: CIN 1 DUP CALLDOS DUP 3 = IF
     GO-OPSYS                           ( CTRL-C )
     ELSE DUP 12 = IF
         RESTARTAD @ GO                 ( CTRL-R )
         ELSE DUP 13 = IF
             DROP RECURSE               ( CTRL-S )
         ENDIF
     ENDIF
 ENDIF ;

: CIS 0B DUP CALLDOS IF
     CIN DROP
 ENDIF ;

: COUT CIS  2 CALLDOS DROP ;


                             ( CTYPE, $C" )

: CTYPE DUP IF
     0 DO
         DUP B@ COUT 1+
     LOOP DROP
     ELSE 2DROP
 ENDIF ;

: $C" R> DUP B@ SWAP 1+ SWAP 2DUP + >R CTYPE ;



                       ( FILE INTERFACES )

80 CONSTANT BUFSIZE
1A CONSTANT EOFCHR

: FFLAGS @ ;
: BUFP @ 1+ ;
: BUFLEN @ 3 + ;
: SCHAN# @ 5 + ;
: BUFAD 2 + @ ;
: FCB 4 + @ ;


: FFLAGS@& OVER FFLAGS B@ & ;

: FFLAGS|! OVER FFLAGS B@ | OVER FFLAGS B! ;

: SERIAL 80 FFLAGS@& ;


: SHOW-FNAME SERIAL IF
     SCHAN# @ IF
         C" #LST"
         ELSE C" #CRT"
     ENDIF
     ELSE FCB DUP 1+ 8 CTYPE   C" ."   9 + 3 CTYPE
 ENDIF ;

: FERRS 0D COUT 0A COUT CASE
         2  =:  C" READ PAST EOF."                    ;;
         3  =:  C" FILE NOT OPENED FOR READING."      ;;
         4  =:  C" FILE NOT OPENED FOR WRITING."      ;;
         5  =:  C" FILE DOESN'T EXIST."               ;;
         6  =:  C" DISK WRITE ERROR."                 ;;
         7  =:  C" FILE CAN'T BE CREATED."            ;;
 CASEND  C"     "   SHOW-FNAME   0D COUT 0A COUT   RESTARTAD @ GO ;


: EOF FFLAGS B@ 1 & ;

: RESET 0FE FFLAGS@&  OVER FFLAGS B!
   0 OVER 2DUP BUFLEN !   BUFP !
   FCB 0 OVER  0C + B!    4  SWAP 20 +  0 FILL ;

: FRES DUP RESET   DUP FFLAGS DUP B@ 80 & SWAP B! ;

: BUFADSET 1A CALLDOS DROP ;



: CLOSE SERIAL NOT IF
     DUP FCB 10 CALLDOS DROP
 ENDIF FRES DROP ;


: DELETE SERIAL NOT IF
     DUP FCB 13 CALLDOS DROP
 ENDIF FRES DROP ;


: OPENR FRES  SERIAL NOT IF
     DUP FCB 0F CALLDOS   0FF = IF
         5 FERRS                        ( NON EXISTANT FILE )
     ENDIF
 ENDIF 2 FFLAGS|!  DROP ;


: OPENW FRES  SERIAL NOT IF
     DUP DELETE   DUP FCB 16 CALLDOS 0FF = IF
         7 FERRS                        ( FILE CAN'T BE CREATED )
     ENDIF
 ENDIF 4 FFLAGS|!  DROP ;


: RENAME SWAP SERIAL  ROT SERIAL  ROT  | IF
     2DROP
     ELSE FCB 1+   OVER FCB 11 + 0B $BMOVE    FCB 17 CALLDOS DROP
 ENDIF ;



: READ 2 FFLAGS@& IF
     1 FFLAGS@& IF
         2 FERRS                        ( READ PAST EOF )
         ELSE SERIAL IF
             0 OVER BUFAD   " > COUT   BEGIN
                 CIN DUP 0D = IF
                     DROP 1
                     ELSE DUP 1B = IF
                         2DROP DROP 0 OVER BUFAD        ( ESCAPE )
                          C" *ESC*"    0D COUT    0A COUT
                         ELSE DUP 08 = IF
                             DROP OVER IF               ( CTRL-H )
                                 1- SWAP 1- SWAP
                                 ( OP-VER# @ 20 < IF  08 COUT  ENDIF )
                             ENDIF
                             ELSE OVER B!  1+ SWAP 1+ SWAP
                         ENDIF
                     ENDIF 0
                 ENDIF 3 PICK   BUFSIZE 2 -   U>= |
             END 0D OVER B! 1+   0A SWAP B!   2 +  OVER BUFLEN !  0A COUT
             ELSE DUP BUFAD BUFADSET    DUP FCB 14 CALLDOS
               80 BUFADSET IF
                 1 FFLAGS|!  0          ( EOF )
                 ELSE BUFSIZE
             ENDIF OVER BUFLEN !
         ENDIF 0 SWAP BUFP !
     ENDIF
     ELSE 3 FERRS                       ( NOT OPENED FOR READING )
 ENDIF ;



: WRITE 4 FFLAGS@& IF
     SERIAL IF
         DUP SCHAN# @ IF
             5
             ELSE 2
         ENDIF OVER BUFAD   ROT BUFP DUP @   0 ROT !   0 DO
             2DUP B@ 7F &  SWAP CALLDOS DROP 1+
         LOOP 2DROP
         ELSE DUP BUFAD BUFADSET   DUP FCB 15 CALLDOS   80 BUFADSET   IF
             6 FERRS                    ( WRITE ERRORS )
             ELSE 0 SWAP BUFP !
         ENDIF
     ENDIF
     ELSE 4 FERRS                       ( NOT OPENED FOR WRITING )
ENDIF ;

: FLUSH DUP BUFP @ IF
     WRITE
     ELSE DROP
 ENDIF ;


: RBYTE CIS   2 FFLAGS@& IF
     DUP BUFP @   OVER BUFLEN @ U>= IF
         DUP READ   DUP EOF IF          ( BUFFER EMPTY )
             DROP EOFCHR
             ELSE RECURSE
         ENDIF
         ELSE DUP BUFP  DUP @ SWAP 1+!   SWAP BUFAD + B@
     ENDIF
     ELSE 3 FERRS                       ( NOT OPENED FOR READING )
 ENDIF ;

: RCH DUP EOF IF
     2 FERRS                    ( READ PAST EOF )
     ELSE DUP RBYTE 7F & SWAP OVER  EOFCHR = IF
         1 FFLAGS|!             ( EOF )
     ENDIF DROP
 ENDIF ;



: WBYTE CIS  4 FFLAGS@& IF
     SERIAL IF
         SCHAN# @ IF
             5                          ( PRINTER )
             ELSE 2
         ENDIF CALLDOS DROP             ( DO SERIAL OUTPUT DIRECTLY )
         ELSE SWAP OVER DUP BUFP @ SWAP BUFAD + B!
           DUP BUFP DUP 1+!   @ BUFSIZE = IF
             WRITE                      ( BUFFER FULL )
             ELSE DROP
         ENDIF
     ENDIF
     ELSE 4 FERRS                       ( NOT OPENED FOR WRITING )
 ENDIF ;


: WCH SWAP 7F & SWAP WBYTE ;




FALLOC INFILE
FALLOC OUTFILE

: GCH INFILE RCH ;
: TCH OUTFILE WCH ;

0 VARIABLE ECHFIB^

: UGCH GCH DUP 5F > OVER 7B < &   UPPER @ & IF
     20 -
 ENDIF INFILE SERIAL NOT    INFOF @ 4 & NOT NOT   & IF
     OVER TCH
 ENDIF DROP INFOF @ 80 & IF
     DUP ECHFIB^ @ WCH                  ( echo onto echfib if bit 7 set )
 ENDIF DUP 09 = IF
     DROP 20
 ENDIF ;


: ININIT 80 INFILE FFLAGS B!    0 INFILE SCHAN# !    INFILE OPENR
  ( 0 030 CALLDOS OP-VER# ! )  ;  ( MS-DOS 2+ )

: OUTINIT 80 OUTFILE FFLAGS B!    0 OUTFILE SCHAN# !    OUTFILE OPENW ;



                                  IFEND
( ==================================================================== )
(                        END FILE SYSTEM SECTION                       )
( ==================================================================== )







( ==================================================================== )
(                             OWNIO SECTION                            )
( ==================================================================== )
                              ?OWNIO IFTRUE


80 BARRAY TBUFF
0 VARIABLE TBUFP
0 VARIABLE BUFSIZE

CODE IN-ED    0ED # AL IN   0 # AH MOV   $PUSH JMP     EDOC
CODE IN-EC    0EC # AL IN   0 # AH MOV   $PUSH JMP     EDOC
CODE OUT-EC   AX POP    AL # 0EC OUT   $NEXT JMP     EDOC

: COUT BEGIN
     IN-ED   1 &                ( READ STATUS & WAIT IF NOT READY )
 END OUT-EC ;                   ( SEND CHARACTER WHEN READY )

: CIN BEGIN
     IN-ED   2 &                ( READ STATUS & WAIT IF NOT READY )
 END  IN-EC 7F & DUP COUT ;     ( READ CHARACTER & ECHO )

: CIS ;                         ( DUMMY ROUTINE )



                             ( CTYPE, $C" )

: CTYPE DUP IF
     0 DO
         DUP B@ COUT 1+
     LOOP DROP
     ELSE 2DROP
 ENDIF ;

: $C" R> DUP B@ SWAP 1+ SWAP 2DUP + >R CTYPE ;


: TCH COUT ;

: TGET  " > COUT     0 TBUFP !    BEGIN
     CIN  DUP TBUFP @ TBUFF B!   CASE
             0D  =:  TBUFP 1+!   0A COUT   1  ;;                        ( CR )
             1B  =:  C" *ESC*"  0D COUT 0A COUT   0 TBUFP !  0  ;;      ( ESC )
             08  =:  TBUFP @ IF                                         ( BS )
                         TBUFP 1-!
                     ENDIF  0 ;;
             NOCASE  =:  TBUFP 1+!   0  ;;
     CASEND
 END   TBUFP @ BUFSIZE !    0 TBUFP ! ;

: GCH TBUFP @  BUFSIZE @  >= IF
     TGET RECURSE
     ELSE TBUFP @ TBUFF  B@     TBUFP 1+!
 ENDIF ;

: UGCH GCH ;

: OUTINIT ;
: ININIT 0 TBUFP !   0 BUFSIZE ! ;


                                  IFEND
( ==================================================================== )
(                           END OWNIO SECTION                          )
( ==================================================================== )



( ==================================================================== )
( ==================================================================== )
                   ?FILESYS NOT  ?OWNIO NOT   & IFTRUE

: ININIT ;
: OUTINIT ;

                                  IFEND
( ==================================================================== )
( ==================================================================== )



                                 ( RESTART )

: $RESTART 0 STATE !   0 FLAGS !    ININIT  OUTINIT    GOQIAD @ GO ;

CODE RESTART    CLD   CS AX MOV   AX DS MOV   AX SS MOV
                SSIZE STACK # SP MOV   RSIZE RSTACK # BP MOV
               'B $RESTART ) JMP   EDOC
'B RESTART RESTARTAD T!




( ==================================================================== )
(                            CRT I/O SECTION                           )
( ==================================================================== )
                               ?CRT IFTRUE


( TYPE, $T" )


: TYPE DUP IF
     0 DO
         DUP B@ TCH 1+
     LOOP DROP
     ELSE 2DROP
 ENDIF ;

: $T" R> DUP B@ SWAP 1+ SWAP 2DUP + >R TYPE ;


                      ( CRIGHT - COPYRIGHT NOTICE )

: CRIGHT T" (c) Copyright 1980 The Stackworks " ;



                               ( ABORTS )

: ABORT T"  ABORT " RESTART ;

: PNAME HERE 1+ HERE B@ TYPE ;

: UNDEFINED 0D TCH 0A TCH  PNAME T"  ? " RESTART ;

: D/0 T" D/0 " ABORT ;         'B D/0 D/0AD T!



                             ( STACK CHECK )

: CHECK SP@ 100 STACK U> IF
     T" STACK UNDERFLOW" ABORT
     ELSE RP@ 100 RSTACK U> IF
         T" RETURN STACK UNDERFLOW" ABORT
     ENDIF
 ENDIF ;



                     ( OUTPUT WORDS )

: SPACE 20 TCH ;

: SPACES DUP IF
     DUP 0 DO
         SPACE
     LOOP
 ENDIF DROP ;

: CR 0D TCH 0A TCH ;

: NASCII DUP 9 > IF
     7 +
 ENDIF 30 + ;

: . >R CHECK R> DUP 0< IF
     MINUS T" -"
 ENDIF 0 BEGIN
     1+ SWAP BASE @ U/MOD ROT OVER 0=
 END SWAP DO
     NASCII TCH
 LOOP SPACE ;

: ? @ . ;

: .HEX >R >R CHECK R> R> DUP 0 DO
     SWAP 10 U/MOD ROT
 LOOP SWAP DROP 0 DO
     NASCII TCH
 LOOP SPACE ;

: X. 4 .HEX ;
: B. 2 .HEX ;




( ==================================================================== )
                                OTHERWISE

: D/0 RESTART ;         'B D/0   D/0AD T!


                                  IFEND
( ==================================================================== )
(                        END OF CRT I/O SECTION                        )
( ==================================================================== )





( ==================================================================== )
(                          INTERPRETER SECTION                         )
( ==================================================================== )
                             ?INTERP IFTRUE



                 ( BASE CONVERSION WORDS )

: DECIMAL 0A BASE ! ;
: HEX 10 BASE ! ;
: OCTAL 8 BASE ! ;



( ,   B, )
: , HERE ! 2 DP+!   SYMPTR @ HERE U<= IF
     T" D>S " ABORT
 ENDIF ;

: B, HERE B! 1 DP+!   SYMPTR @ HERE U<= IF
     T" D>S " ABORT
 ENDIF ;




( EXECUTE, LITERAL, LINK )

: EXECUTE DUP 3 + @ SWAP B@ 80 & STATE @ NOT | IF
     GO
     ELSE ,
 ENDIF ;

: LITERAL  STATE @ IF
     'B LIT , ,
 ENDIF ;

: LINK SYMPTR @  HERE B@ 1+  -    HERE OVER   HERE B@ 1+ $BMOVE
   2 - SWAP OVER !     2 - CONTEXT @ OVER !     1- 0 OVER B!
   DUP SYMPTR !     SYMTP @ - CURRENT @ ! ;




        ( WORD - PARSE OUT A WORD FROM THE INPUT STREAM )


: DELIM= DUP DELIMITER @ =   OVER 0A =  |    OVER 0D =   | ;


: WORD HERE 1+ DUP BEGIN
     DROP UGCH DELIM= NOT
 END BEGIN
     OVER B!   1+   UGCH DELIM=
 END DROP HERE -  1-   HERE B!    20 DELIMITER ! ;




                         ( FIND )

CODE FIND1   DI POP   BX POP    BEGIN,
             CX POP   CX BX ADD   CX PUSH   BX PUSH   DI PUSH
             5 # BX ADD   0 [DI] CL MOV   CL INC   BEGIN,
                  0 [DI] AL MOV   CS: 0 [BX] AL CMP   0<> IF,
                       AL AL XOR
                  ELSE,   BX INC   DI INC   CL DEC   ENDIF,
             0= END,
             DI POP   BX POP   CL CL OR   0= IF,    ( FOUND )
                  AX POP   BX PUSH   1 # AX MOV   $PUSH ) JMP
             ENDIF,   BX INC   CS: 0 [BX] CX MOV
             CX CX OR   0= IF,                      ( END OF VOCABULARY )
                  BX INC   BX INC   CS: 0 [BX] CX MOV
                  BX INC   CX BX XCHG
                  BX BX OR   0= IF,                 ( END OF DICTIONARY )
                       AX POP   BX PUSH   $NEXT ) JMP
                  ENDIF,   CS: 0 [BX] CX MOV
             ENDIF,
             CX BX MOV
        AGAIN,   EDOC

: FIND SYMTP @ CONTEXT @ HERE FIND1 ;


: NUMBER HERE B@ HERE 1+ DUP B@ 2D = IF
     1+ SWAP 1- SWAP -1
     ELSE 1
ENDIF 0 2SWAP   SWAP 0  SWAP 0 DO
     DROP DUP B@   DUP 39 > IF
         DUP 40 > IF
             7 -
             ELSE DROP 80
         ENDIF
     ENDIF 30 -   DUP BASE @ U< IF
         ROT BASE @ *  +   SWAP 1+   1
         ELSE 2DROP 2DROP 0 EXIT
     ENDIF
 LOOP DUP IF
     2DROP * 1
 ENDIF ;



           ( INTRLP - THE MAIN LOOP FOR THE OUTER INTERPETER )

: INTRLP BEGIN
     WORD FIND IF
         EXECUTE
         ELSE NUMBER IF
             LITERAL
             ELSE UNDEFINED
         ENDIF
     ENDIF 0
 END ;

'B INTRLP GOQIAD T!



: $'B WORD FIND IF
     3 + @
     ELSE UNDEFINED
 ENDIF ;
: 'B $'B LITERAL ;
IMP 'B


: $'S R> DUP 2 + >R   @  SYMTP @ + ;
: 'S WORD FIND IF
     STATE @ IF
         'B $'S ,   SYMTP @ - ,
         ELSE LITERAL
     ENDIF
     ELSE UNDEFINED
 ENDIF ;

: ' WORD FIND IF
     3 + @ 3 + LITERAL
     ELSE UNDEFINED
 ENDIF ;



                                  IFEND
( ==================================================================== )
(                      END OF INTERPRETER SECTION                      )
( ==================================================================== )





( ==================================================================== )
(                           COMPILER SECTION                           )
( ==================================================================== )
                            ?COMPILE IFTRUE



( C", T" )

: C" 22 DELIMITER !   STATE @ IF
     'B $C" ,   WORD HERE B@ 1+ DP+!
     ELSE WORD HERE 1+ HERE B@ CTYPE
 ENDIF ;
IMP C"

: T" 22 DELIMITER !   STATE @ IF
     'B $T" ,   WORD HERE B@ 1+ DP+!
     ELSE WORD PNAME
 ENDIF ;
IMP T"


: DC DEPTH @ IF
     CR CR T" UNBALANCED NESTING" ABORT
 ENDIF ;



           ( CUR@@CON!, $CODE, CONSTANT, VARIABLE, :, ;, ;: )

: CUR@@CON! CURRENT @ @ CONTEXT ! ;

: $CODE CUR@@CON! WORD INFOF @ 1 & IF
     FIND IF
         DROP T" REDEF " PNAME 0D TCH 0A TCH
     ENDIF
 ENDIF HERE LINK ;

: CONSTANT $CODE 0E8 B, 'B $CONSTANT HERE 2 + - , , CUR@@CON! ;
: VARIABLE HERE 5 + CONSTANT , ;

: : 1 STATE ! $CODE 0E8 B, 'B $: HERE 2 + - , 0 DEPTH ! ;
: ; CUR@@CON! 0 STATE ! 'B $; , DC ;            IMP ;
: ;: 'B $:;CODE ,  0E8 B,  'B $: HERE 2 + - , DC ;         IMP ;:



                        ( CONDITIONAL BRANCHING )

 : IF 'B $IF , HERE DUP 2 + ,   DEPTH 1+! ;
 : ELSE HERE 4 + SWAP ! 'B $ELSE , HERE DUP 2 + , ;
 : ENDIF HERE SWAP !   DEPTH 1-! ;
IMP IF            IMP ELSE          IMP ENDIF

 : BEGIN HERE   DEPTH 1+! ;
 : END  'B $IF , ,   DEPTH 1-! ;
IMP BEGIN         IMP END


: DO 'B $DO , HERE   DEPTH 1+! ;
: +LOOP 'B $+LOOP , ,   DEPTH 1-! ;
: LOOP 1 LITERAL +LOOP ;
IMP DO             IMP +LOOP              IMP LOOP



: COMPILE $'B , ;
: IMP 'S DUP B@ 80 | SWAP B! ;
: IMMEDIATE 80   SYMPTR @   B! ;

IMP 'S          IMP '          IMP COMPILE


: [ 0 STATE ! ;      IMP [
: ] 1 STATE ! ;      IMP ]

: (  29 DELIMITER ! WORD ;      IMP (



             ( DATA STRUCTURE CONSTRUCTIONS )

: ARRAY HERE 5 + CONSTANT DUP + DP+! ;: @ OVER + + ;

: BARRAY HERE 5 + CONSTANT DP+! ;: @ + ;

: SET CONSTANT , ;:  DUP 2 + @ SWAP @ ! ;




                   ( VOCABULARY WORDS )

: VLIST CONTEXT @ BEGIN
     SYMTP @ +   DUP 3 + @ X. SPACE   DUP B@ B. SPACE   DUP 5 +
     DUP B@ DUP .   SWAP 1+ SWAP TYPE CR   1+ @ DUP 0=
 END DROP ;

: $FORGET DUP 3 + @ DP !      DUP 1+ @  CURRENT @ !  CUR@@CON!
   5 + COUNT + SYMPTR ! ;

: FORGET COMPILE 'S     'S $FORGET    EXECUTE ;
IMP FORGET

: VOCABULARY SYMPTR @ 6 - DUP SYMPTR !   6 OVER 0 FILL
   CURRENT @ OVER 3 + !   SYMTP @ - VARIABLE   ;: @ DUP CVOC ! @ CONTEXT ! ;

: DEFINITIONS CVOC @ CURRENT ! ;



             ( PROGRAM CONTROL CONSTRUCTIONS )

: WHILE COMPILE IF   DEPTH 1-! ;
: REPEAT 'B $ELSE , SWAP ,   HERE SWAP !   DEPTH 1-! ;
IMP WHILE         IMP REPEAT

: RECURSE CURRENT @ @ SYMTP @ + 3 + @ , ;
IMP RECURSE


                            ( CASE )

: CASE 'B $CASE , HERE 0 ,   DEPTH 1+! ;
: =: 'B $=: , HERE 0 , ;
: ;; 'B $;; , HERE SWAP ! ;
: CASEND  'B R> ,   'B 2DROP ,    HERE SWAP !   DEPTH 1-! ;
IMP CASE    IMP =:    IMP ;;    IMP CASEND


: " WORD HERE 1+ B@ LITERAL ;      IMP "




   ( ASSEMBLER BASICS - CODE, ;CODE, EDOC, $PUSH, $NEXT )

VOCABULARY ASSEMBLER

: CODE $CODE ASSEMBLER ;
: ;CODE  ' $:;CODE ,    0 STATE !     ASSEMBLER ;
IMP ;CODE

ASSEMBLER DEFINITIONS
: EDOC CUR@@CON! ;

: $PUSH  'B $$PUSH ;
: $NEXT  $PUSH  1+ ;

FORTH DEFINITIONS



                                  IFEND
( ==================================================================== )
(                        END OF COMPILER SECTION                       )
( ==================================================================== )





( ==================================================================== )
(                      COMPILER/FILE SYSTEM SECTION                    )
( ==================================================================== )
                       ?FILESYS ?COMPILE &  IFTRUE

                       ( MORE FILE RELETED WORDS )

: FALLOC HERE 9 + CONSTANT   HERE 0B + ,   HERE 89 + ,   0 B,
   0 , 0 , 0 ,   A4 DP+! ;: ;


( NAMIT  -  FIB^ NAMIT FILENAME   --  NAME THE FILE ASSOCIATED WITH FIB^ )

0 VARIABLE WPTR
0 VARIABLE WLN

: GCHR WLN @ IF
     WPTR 1+!   WLN 1-!   WPTR @ B@ 1
     ELSE 0
 ENDIF ;

: $NAMIT DUP FCB 0C OVER BLANK   0 OVER B!   0 9 ROT   GCHR DROP GCHR IF
     DUP " : = IF
         DROP 40 - OVER B!           ( UNIT SPECIFIED )
         ELSE ROT 1+ ROT OVER B!  1+ SWAP OVER B!   SWAP 2 - SWAP
     ENDIF 1+ SWAP 1- SWAP BEGIN   GCHR WHILE
         DUP " . = IF
             DROP 3 PICK 0= IF
                 + SWAP 1+ 3 ROT
             ENDIF
             ELSE 3 PICK IF
                 OVER B! 1+ SWAP 1- SWAP
                 ELSE DROP
             ENDIF
         ENDIF
     REPEAT
     ELSE OVER 1+ B!
 ENDIF 2DROP DROP DUP FCB 1+ DUP B@   " #   = IF
     1+ B@  " L  =   OVER SCHAN# !   80
     ELSE DROP 0
 ENDIF SWAP FFLAGS B! ;

: NAMIT WORD HERE B@ WLN !   HERE WPTR !   $NAMIT ;


: $FLOAD R> DUP B@   2DUP + 1+ >R   WLN ! WPTR !   INFILE $NAMIT
   INFILE OPENR    INTRLP ;

: FLOAD STATE @ IF
     'B $FLOAD ,   WORD HERE B@ 1+ DP+!
     ELSE INFILE NAMIT   INFILE OPENR   INTRLP
ENDIF ;
IMP FLOAD


: [END-OF-FILE]    CR   INFILE CLOSE      R> R> 2DROP   ININIT  ;


                                  IFEND
( ==================================================================== )
(                 END OF COMPILER/FILE SYSTEM SECTION                  )
( ==================================================================== )




[END-OF-FILE]

