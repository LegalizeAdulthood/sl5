

                        ( 8086 ASSEMBLER )


                     ( preliminary release )


ASSEMBLER DEFINITIONS    HEX

: BIG? ( n -- flag )  080 -080 OVER - >R - R> U< ;

: REL ( a1 a2 -- offs )
  1+ - DUP BIG? IF  T" BRANCH OUT OF RANGE" ABORT  ENDIF ;

0800 CONSTANT #   0809 CONSTANT )   0812 CONSTANT []

080 CONSTANT [BX+SI]   089 CONSTANT [BX+DI]
092 CONSTANT [BP+SI]   09B CONSTANT [BP+DI]

0A4 CONSTANT [SI]      0AD CONSTANT [DI]
0B6 CONSTANT [BP]      0BF CONSTANT [BX]

: [SI+BX] [BX+SI] ;    : [DI+BX] [BX+DI] ;
: [SI+BP] [BP+SI] ;    : [DI+BP] [BP+DI] ;

000 CONSTANT AL   009 CONSTANT CL   012 CONSTANT DL   01B CONSTANT BL
024 CONSTANT AH   02D CONSTANT CH   036 CONSTANT DH   03F CONSTANT BH
040 CONSTANT AX   049 CONSTANT CX   052 CONSTANT DX   05B CONSTANT BX
064 CONSTANT SP   06D CONSTANT BP   076 CONSTANT SI   07F CONSTANT DI
0C0 CONSTANT ES   0C9 CONSTANT CS   0D2 CONSTANT SS   0DB CONSTANT DS

: REG  CONSTANT ;: B@ SWAP 0FFC0 & = MINUS ;

( 000 REG 8? )  040 REG 16?   080 REG M?   0C0 REG S?

-1 VARIABLE SIZ  ( BYTE/WORD FLAG )
 0 VARIABLE ISF  ( FAR FLAG )

: !SIZ ( -- ) -1 SIZ ! ;  ( WORD )
: !SEG ( -- )  0 ISF ! ;  ( FAR OFF )

: RESET ( -- ) !SIZ !SEG ;

: REG? ( n -- flag )  0FFC0 & 80 < ;
: LOW ( n -- mask )  7 & ;
: MID ( n -- mask )  038 & ;
: OP, ( n op -- )  | B, ;
: W, ( op mr -- )  16? 1 & OP, ;
: SIZ, ( op -- op' )  SIZ @ 1 & OP, ;
: ,C, ( n f -- )  IF , ELSE B, ENDIF ;
: REG, ( mr1 mr2 -- )  MID SWAP LOW | 0C0 OP, ;
: ESC, ( m -- )  0D8 OP, ;

: MEM, ( disp mr m -- )
  OVER ) = IF  MID 6 OP, DROP ,
  ELSE  MID OVER LOW | ROT ROT [BP] = OVER 0= &
  IF  SWAP 040 OP, B,  ELSE  SWAP OVER BIG?
  IF  080 OP, ,  ELSE  OVER 0=
  IF  SWAP DROP  ELSE  040 OP,  ENDIF  B,
  ENDIF  ENDIF  ENDIF ;

: OW, ( mr op -- mr )  OVER W, ;
: WM, ( disp mem reg op -- )  OW, MEM, ;
: RM, ( mr reg -- )  OVER REG? IF  REG,  ELSE  MEM,  ENDIF ;

: WR, ( r/m r op -- )  3 PICK DUP REG?
  IF  W, REG,  ELSE  DROP SIZ, MEM,  !SIZ  ENDIF ;

: FAR? ( n1 -- n2 )  ISF @ IF  8 |  ENDIF  !SEG ;

: FORM1  CONSTANT ;: @ B, ;
: FORM2  CONSTANT ;: @ B, 0A B, ;
: FORM3  CONSTANT ;: @ B, DUP IF  HERE REL  ENDIF  B, ;
: FORM4  CONSTANT ;: @ B, MEM, ;
: FORM5  CONSTANT ;: @ SIZ, !SIZ ;
: FORM7  CONSTANT ;: @ F6 WR, ;

: FORM8  CONSTANT ;: @ >R  DUP REG? IF  DUP DX =
  IF SWAP ENDIF  ELSE  ROT  ENDIF  16? 1 &  R> |
  SWAP # = IF  B, B,  ELSE  08 OP,  ENDIF ;

: FORM9  CONSTANT ;: @ OVER 16?
  IF  040 | SWAP LOW OP,  ELSE  0FE WR,  ENDIF ;

: FORM10  CONSTANT ;: @ OVER CL =
  IF  SWAP DROP D2  ELSE  OVER 1 = IF SWAP DROP ENDIF  0D0  ENDIF  WR, ;

: FORM11  CONSTANT ;: @ DUP FAR? B,  1 & 0= IF  ,  ENDIF ;

: FORM12  CONSTANT ;:  OVER ) =
  IF  SWAP DROP  B@  ISF @
    IF  1 & IF  0EA  ELSE  09A  ENDIF  B,  SWAP , ,  !SEG
    ELSE  SWAP HERE - 2 - SWAP  2DUP 1 & SWAP BIG? 0= &
      IF  2 OP, B,  ELSE  B,  1- ,  ENDIF  ENDIF
  ELSE  OVER [] = IF  SWAP DROP  ) SWAP  ENDIF
    0FF B, 1+ B@ FAR?  RM,  ENDIF ;

: FORM13  CONSTANT , ;:  OVER REG?
  IF  B@ SWAP LOW OP,  ELSE  2 + OVER S?
    IF  B@ LOW SWAP MID OP,
    ELSE  COUNT SWAP B@ B,  MEM,  ENDIF
  ENDIF ;

: FORM14  CONSTANT ;:  @ >R
  DUP REG? IF  OVER REG?
    IF  R> OW, SWAP REG,  ELSE  OVER DUP M? SWAP ) = |
    IF  R> 2 | WM,  ELSE  ( #) SWAP DROP DUP LOW 0= ( acc?)
    IF  R> 4 | OW, 16? ,C,
    ELSE  OVER BIG?  OVER 16?  2DUP &
      ROT ROT  1 &  SWAP COM  2 &  |  80 OP,
      SWAP LOW 0C0 |  R> OP,  ,C,
    ENDIF  ENDIF  ENDIF
  ELSE  ( mem)  ROT DUP REG?
    IF  R> WM,
    ELSE  ( #) DROP  3 PICK BIG?
      DUP COM  2 &  080 | SIZ,
      ROT ROT R> MEM,  SIZ @ & ,C,  !SIZ
  ENDIF  ENDIF ;

: TEST ( src dst -- )
  DUP REG? IF  OVER REG?
    IF  084 OW, SWAP REG,  ELSE  OVER DUP M? SWAP ) = |
    IF  084 WM,  ELSE  ( #) SWAP DROP DUP LOW 0= ( acc?)
    IF  0A8 OW,
    ELSE  0F6 OW,  DUP LOW  0C0 OP,
    ENDIF  16? ,C,  ENDIF  ENDIF
  ELSE  ( mem)  ROT DUP REG?
    IF  084 WM,
    ELSE  ( #) DROP  0F6 SIZ,  0 MEM,  SIZ @ ,C,  !SIZ  ENDIF
  ENDIF ;

: MOV ( src dst -- )
  DUP S? IF  08E B, RM,  ELSE  DUP REG?
    IF  OVER ) = OVER LOW 0= &
      IF  0A0 SWAP W, DROP ,  ELSE  OVER S?
      IF  SWAP 08C B, REG,  ELSE  OVER # =
      IF  SWAP DROP  DUP 16? SWAP LOW OVER 8 & | 0B0 OP, ,C,
      ELSE  08A OW, RM,  ENDIF  ENDIF  ENDIF
    ELSE  ( mem) ROT DUP S?
      IF  08C B, MEM,  ELSE  DUP # =
      IF  DROP 0C6 SIZ, 0 MEM,  SIZ @ ,C,  !SIZ
      ELSE  OVER ) = OVER LOW 0= &
      IF  0A2 SWAP W, DROP ,  ELSE  088 OW, RM,
  ENDIF  ENDIF  ENDIF  ENDIF  ENDIF ;

: XCHG ( mr1 mr2 -- )
  DUP REG? IF  OVER REG?
    IF  OVER AX = IF SWAP ENDIF  DUP AX =
    IF  DROP LOW 090 OP,  COMPILE $; ( exit) ENDIF  ENDIF
  ELSE  ROT  ENDIF  DUP 16? SIZ !  086 WR, ;

: ESC ( src ext-opc -- )  LOW 0D8 OP, RM, ;

: INT ( n -- )  0CD OVER 3 = IF  SWAP DROP 1-  ELSE  B,  ENDIF  B, ;

026 FORM1 ES:     027 FORM1 DAA     02E FORM1 CS:     02F FORM1 DAS
036 FORM1 SS:     037 FORM1 AAA     03E FORM1 DS:     03F FORM1 AAS
090 FORM1 NOP     098 FORM1 CBW     099 FORM1 CWD     09B FORM1 WAIT
09C FORM1 PUSHF   09D FORM1 POPF    09E FORM1 SAHF    09F FORM1 LAHF
0CE FORM1 INTO    0CF FORM1 IRET    0D7 FORM1 XLAT    0F0 FORM1 LOCK
0F2 FORM1 REPNZ   0F3 FORM1 REPZ    : REP REPZ ;      0F4 FORM1 HLT
0F5 FORM1 CMC     0F8 FORM1 CLC     0F9 FORM1 STC     0FA FORM1 CLI
0FB FORM1 STI     0FC FORM1 CLD     0FD FORM1 STD

0D4 FORM2 AAM     0D5 FORM2 AAD

070 FORM3 JO      071 FORM3 JNO     072 FORM3 JC      072 FORM3 JB
073 FORM3 JNC     073 FORM3 JNB     074 FORM3 JZ      075 FORM3 JNZ
076 FORM3 JNA     077 FORM3 JA      078 FORM3 JS      079 FORM3 JNS
07A FORM3 JPE     07B FORM3 JPO     07C FORM3 JL      07D FORM3 JNL
07E FORM3 JNG     07F FORM3 JG      0E0 FORM3 LOOPNZ  0E1 FORM3 LOOPZ
0E2 FORM3 LOOP    0E3 FORM3 JCXZ    0EB FORM3 JU

08D FORM4 LEA     0C4 FORM4 LES     0C5 FORM4 LDS

0A4 FORM5 MOVS    0A6 FORM5 CMPS    0AA FORM5 STOS    0AC FORM5 LODS
0AE FORM5 SCAS

010 FORM7 NOT     018 FORM7 NEG     020 FORM7 MUL     028 FORM7 IMUL
030 FORM7 DIV     038 FORM7 IDIV

0E4 FORM8 IN      0E6 FORM8 OUT     000 FORM9 INC     008 FORM9 DEC

000 FORM10 ROL    008 FORM10 ROR    010 FORM10 RCL    018 FORM10 RCR
020 FORM10 SHL    028 FORM10 SHR    038 FORM10 SAR

0C2 FORM11 +RET   0C3 FORM11 RET    10E8 FORM12 CALL  20E9 FORM12 JMP

08F07 058 FORM13 POP   0FF36 050 FORM13 PUSH

000 FORM14 ADD    008 FORM14 OR     010 FORM14 ADC    018 FORM14 SBB
020 FORM14 AND    028 FORM14 SUB    030 FORM14 XOR    038 FORM14 CMP


: BYTE  0 SIZ ! ;  ( BYTE operation )
: FAR   1 ISF ! ;  ( FAR operation )

                           ( ALIASES )

: JBE  JNA ;      : JAE  JNB ;        : JE  JZ ;       : JNE  JNZ ;
: JGE  JNL ;      : JLE  JNG ;        : JP  JPE ;      : JNP  JPO ;
: LOOPE  LOOPZ ;  : LOOPNE  LOOPNZ ;  : REPE  REPZ ;   : REPNE  REPNZ ;
: SAL  SHL ;

                    ( ASSEMBLER CONDITIONALS )

070 CONSTANT NO   071 CONSTANT OV     072 CONSTANT U>=
073 CONSTANT U<   074 CONSTANT 0<>    075 CONSTANT 0=
076 CONSTANT U>   077 CONSTANT U<=    078 CONSTANT 0>=
079 CONSTANT 0<   07A CONSTANT PO     07B CONSTANT PE
07C CONSTANT >=   07D CONSTANT <      07E CONSTANT >
07F CONSTANT <=   0E3 CONSTANT CXNZ   0EB CONSTANT NEVER
: NC  U>= ;       : CY  U< ;


: BEGIN,   HERE ;
: ENDIF,   HERE OVER REL SWAP B! ;
( : ENDIF,   CBUFP OVER REL SWAP B! ; )
: IF,      B, BEGIN, 0 B, ;
( : IF,      B, CBUFP 0 B, ; )
: END,     B, HERE REL B, ;
: WHILE,   IF, SWAP ;
: AHEAD,   NEVER IF, ;
: ELSE,    AHEAD, SWAP ENDIF, ;
: AGAIN,   NEVER END, ;
: REPEAT,  AGAIN, ENDIF, ;

FORTH DEFINITIONS

: CODE  CODE [ ASSEMBLER ] RESET ;

: ;CODE
  COMPILE ;CODE [ ASSEMBLER ] RESET ;  IMP ;CODE


[END-OF-FILE]

